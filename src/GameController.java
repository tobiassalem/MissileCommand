import java.awt.event.*;
import javax.swing.*;

/**
 * This class represents the GameController which runs the Missile Command game
 * and handles user input.
 *
 * @author Tobias Salem, alias Vassago
 * @version 1.0
 */
public class GameController extends MouseAdapter implements Runnable {

   /** The state of the current game. */
   private GameState state;

   /** The display that shows the current game to the user. */
   private GameDisplay display;

   /** The scoreboard that displays the current game's score. */
   private Scoreboard scoreboard;

   /** The logic engine used to run the game. */
   private GameLogic logic;

   /**
    * Constructs a new GameController using the specified components
    * @param display the display to use
    * @param scoreboard the scoreboard to use
    * @param logic the game logic to use
    */
   public GameController(GameDisplay display, Scoreboard scoreboard, GameLogic logic)
   {
      this.display = display;
      this.logic = logic;
      this.scoreboard = scoreboard;
      display.addMouseListener(this);
   }

   /** Starts a new game. **/
   public void startGame() {
      state = new GameState();
      state.worldWidth = display.getWidth();
      state.worldHeight = display.getHeight();
      logic.initializeGameState(state);

      Thread gameThread = new Thread(this);
      gameThread.start();
   }

   /** Runs the game. **/
   public void run() {
      while (logic.isGameOver(state) == false) {
         synchronized (state.playerClicks) {
            logic.updateCycle(state);
         }
         display.update(state);

         // Must modify the scoreboard from within the even handling thread.
         SwingUtilities.invokeLater(new Runnable() {
            public void run() {
               scoreboard.updateScoreboard(state);
            }
         } );

         // Force a repaint and introduce a slight delay (to get ~25 FPS).
         display.repaint(10);
         try { Thread.sleep(40); } catch (Exception e) { /* Ignored. */ }
      }
   }

   /**
    * Registers a click whenever a mouse button is pushed down.
    * @param e mouse event generated by the user
    */
   public void mousePressed(MouseEvent e) {
      if(state != null) {
         synchronized (state.playerClicks) {
            state.playerClicks.add
               (new Vector2D(e.getX(), display.getHeight() - e.getY()));
         }
      }
   }

}
